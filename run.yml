---
- name: EzyAdmin test server connection
  hosts: all
  gather_facts: yes
  tasks:     
    - name: Hostname a variable
      debug: var=inventory_hostname

    - name: Check ansible_os_family
      debug:
        msg: "ansible_os_family={{ ansible_os_family }}"

    - set_fact:
        ip_authorized : "[]"
        
    - block:
        ## Check sudo command
        - name: Test change user privilege to superuser
          command: "{{ item }}"
          #shell: whoami
          become: true
          register: whoamiout
          changed_when: false
          with_items:
            - "whoami"
          #failed_when: "'error' in whoamiout.stderr"
        - debug: msg="Output whoami={{ whoamiout }}"

        # get ip authorized on ~/.ssh/authorized_keys
        - name : get ip authorized on ~/.ssh/authorized_keys 
          shell: 'grep -E "ansible@(ansible\.)?netway\.ezyadmin\.com(\s*)$" ~/.ssh/authorized_keys | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"'
          register: ip_auth
          ignore_errors: true

        # debug
        # - debug: msg="ip_auth.stdout={{ ip_auth.stdout }}"
        - debug: msg="ip_auth.stdout_lines={{ ip_auth.stdout_lines }}"

        - name: Setting host facts using key=value pairs, this format can only create strings or booleans
          set_fact: ip_authorized="{{ ip_auth.stdout_lines | unique }}"
          when : ip_auth is defined and ip_auth.stdout_lines is defined


        - debug: msg="ip_authorized={{ ip_authorized }}"

        - set_fact:
            ezOutputConnection : {
              "ip_authorized" : "{{ip_authorized}}"
            }
        - debug:
            msg: "===ezOutputConnection>>>{{ ezOutputConnection }}<<<ezOutputConnection==="

      when: (ansible_os_family == "RedHat") or (ansible_os_family == "Redhat") or (ansible_os_family == "CentOS") or (ansible_os_family == "Debian")

    - block:
        - name: Test change user privilege to superuser
          win_command: whoami
          #become: true
          register: whoamiout
          changed_when: false
          #when: ansible_os_family == "Windows"
          failed_when: "'error' in whoamiout.stderr"
        #- debug: msg="Output whoami={{ whoamiout.stdout }}"
      when: ansible_os_family == "Windows"
